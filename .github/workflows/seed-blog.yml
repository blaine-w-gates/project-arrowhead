name: Seed Blog to Postgres

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'website-integration/ArrowheadSolution/content/blog/**'
  schedule:
    # Run nightly at 02:00 UTC to precede the audit at ~02:17 UTC
    - cron: '0 2 * * *'

concurrency:
  group: seed-blog-${{ github.ref }}
  cancel-in-progress: true

jobs:
  seed:
    name: Run blog seeding script
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    environment:
      name: Production
    env:
      DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'website-integration/ArrowheadSolution/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: website-integration/ArrowheadSolution

      - name: Compute short SHA
        id: sha
        run: echo "short=$(echo $GITHUB_SHA | cut -c1-8)" >> "$GITHUB_OUTPUT"

      - name: 'Preflight: tsx availability'
        run: npx tsx --version
        working-directory: website-integration/ArrowheadSolution

      - name: Verify env
        run: |
          if [ -z "$DATABASE_URL" ]; then
            echo "DATABASE_URL is not set. Add SUPABASE_DATABASE_URL as a GitHub Actions secret." >&2
            exit 1
          fi
          echo "DATABASE_URL is set (hidden)"
        working-directory: website-integration/ArrowheadSolution

      - name: 'Preflight: REST fallback secrets (optional)'
        run: |
          if [ -z "${SUPABASE_URL:-}" ] || [ -z "${SUPABASE_SERVICE_ROLE_KEY:-}" ]; then
            echo "REST fallback secrets not set; will attempt direct Postgres (IPv4 enforced)."
          else
            echo "REST fallback secrets detected; seeding will use PostgREST."
          fi
        working-directory: website-integration/ArrowheadSolution

      - name: 'Debug: resolve DB host (no secrets)'
        continue-on-error: true
        run: |
          node -e "(async()=>{const u=new URL(process.env.DATABASE_URL);console.log('host:',u.hostname);try{const dns=require('dns').promises;const a=await dns.lookup(u.hostname,{all:true});console.log('addresses:',a);}catch(e){console.error('DNS lookup failed:',e.message);console.log('Continuing...')}})()"
        working-directory: website-integration/ArrowheadSolution

      - name: 'Resolve IPv4 and export PGHOSTADDR'
        id: ipv4_resolver
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(node -p "new URL(process.env.DATABASE_URL).hostname")
          echo "Host: $HOST"
          IPV4=$(getent ahostsv4 "$HOST" | awk 'NR==1{print $1}') || true
          if [ -z "${IPV4:-}" ]; then
            echo "No IPv4 via getent; trying public resolvers..."
            if ! command -v dig >/dev/null 2>&1; then
              sudo apt-get update && sudo apt-get install -y dnsutils
            fi
            for RES in 1.1.1.1 8.8.8.8 9.9.9.9 208.67.222.222; do
              IPV4=$(dig +short A "$HOST" @"$RES" | head -n1 || true)
              [ -n "${IPV4:-}" ] && break
            done
            if [ -z "${IPV4:-}" ]; then
              echo "Trying HTTPS DNS (dns.google)..."
              IPV4=$(curl -fsSL "https://dns.google/resolve?name=$HOST&type=A" | node -e 'let s="";process.stdin.on("data",c=>s+=c);process.stdin.on("end",()=>{try{const j=JSON.parse(s);const ans=(j.Answer||[]).find(v=>v.type===1);process.stdout.write(ans?ans.data:"");}catch(e){}})' || true)
            fi
          fi
          if [ -z "${IPV4:-}" ]; then
            echo "No IPv4 address found; continuing without PGHOSTADDR (may fail on IPv6-only)."
          else
            echo "ipv4_address=$IPV4" >> "$GITHUB_OUTPUT"
            echo "Resolved IPv4: $IPV4"
          fi
        working-directory: website-integration/ArrowheadSolution

      - name: 'Verify effective DATABASE_URL host (sanitized)'
        run: |
          node -e "const u=new URL(process.env.DATABASE_URL);const net=require('net');const sanitized=u.toString().replace(/:[^:@\\/]+@/,'://****@');console.log('effective host:',u.hostname,'ipVersion:',net.isIP(u.hostname)||'N/A','sslmode:',u.searchParams.get('sslmode'));console.log('PGHOSTADDR:',process.env.PGHOSTADDR||'');console.log('effective DATABASE_URL (sanitized):',sanitized);"
        env:
          PGHOSTADDR: ${{ steps.ipv4_resolver.outputs.ipv4_address }}
        working-directory: website-integration/ArrowheadSolution

      - name: Seed blog into Postgres
        run: npx tsx scripts/seed-blog.mts
        env:
          NODE_ENV: production
          NODE_OPTIONS: --dns-result-order=ipv4first
          PGSSLMODE: require
          PGHOSTADDR: ${{ steps.ipv4_resolver.outputs.ipv4_address }}
        working-directory: website-integration/ArrowheadSolution

      - name: Immediate drift check (fail on mismatch)
        run: npm run db:seed:audit
        working-directory: website-integration/ArrowheadSolution

      - name: Upload immediate audit artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: seed-audit-${{ steps.sha.outputs.short }}
          path: website-integration/ArrowheadSolution/seed-audit.json
          if-no-files-found: warn
          retention-days: 30

      - name: 'Post-verify: blog_posts row count (REST)'
        run: |
          node -e "const u=(process.env.SUPABASE_URL||'').replace(/\/$/,''); const k=process.env.SUPABASE_SERVICE_ROLE_KEY; (async()=>{ if(!u||!k){ console.log('No REST secrets; skipping'); return;} const url=u + '/rest/v1/blog_posts?select=slug'; const res=await fetch(url,{headers:{apikey:k,Authorization:'Bearer '+k}}); const arr=await res.json(); const n=Array.isArray(arr)?arr.length:0; console.log('blog_posts count:', n); if (Array.isArray(arr)) { console.log('sample slugs:', arr.slice(0,10).map(x=>x.slug).join(',')); } })().catch(e=>{ console.error('verify failed', e.message); });"
        working-directory: website-integration/ArrowheadSolution

      - name: Upload seed report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: seed-report-${{ steps.sha.outputs.short }}
          path: website-integration/ArrowheadSolution/seed-report.json
          if-no-files-found: warn
          retention-days: 30

      - name: Job summary
        if: always()
        run: |
          node -e "const fs=require('fs'); const p='seed-report.json'; if(!fs.existsSync(p)){ console.log('No seed-report.json; skipping summary'); process.exit(0);} const r=JSON.parse(fs.readFileSync(p,'utf8')); const sha=(process.env.GITHUB_SHA||'').slice(0,8); const hdr=['# Seed Report','', 'Commit: '+sha,'Mode: '+r.mode,'Total: '+r.total, r.mode==='rest' ? ('Upserted: '+r.upserted) : ('Inserted: '+r.inserted+', Updated: '+r.updated),'','Slugs:', (r.slugs||[]).slice(0,20).map(s=>'- '+s).join('\n')].join('\n'); fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, hdr); console.log('Wrote summary');"
        working-directory: website-integration/ArrowheadSolution
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            let body = `Seed blog workflow failed for ${owner}/${repo} on ${context.ref}.\n\nRun: ${runUrl}`;
            try {
              const p = 'website-integration/ArrowheadSolution/seed-report.json';
              if (fs.existsSync(p)) {
                const r = JSON.parse(fs.readFileSync(p, 'utf8'));
                body += `\n\nMode: ${r.mode}\nTotal: ${r.total}`;
                if (typeof r.upserted !== 'undefined') body += `\nUpserted: ${r.upserted}`;
                if (typeof r.inserted !== 'undefined') body += `\nInserted: ${r.inserted}`;
                if (typeof r.updated !== 'undefined') body += `\nUpdated: ${r.updated}`;
              }
            } catch (e) {}
            try {
              const p2 = 'website-integration/ArrowheadSolution/seed-audit.json';
              if (fs.existsSync(p2)) {
                const r2 = JSON.parse(fs.readFileSync(p2, 'utf8'));
                body += `\n\nAudit Counts: FS=${r2.counts?.fs ?? 'N/A'}, DB=${r2.counts?.db ?? 'N/A'}`;
                if (r2.drift) {
                  body += `\nOnly in FS: ${(r2.drift.onlyA||[]).join(', ') || '(none)'}\nOnly in DB: ${(r2.drift.onlyB||[]).join(', ') || '(none)'}`;
                }
              }
            } catch (e) {}
            const title = 'Seed blog workflow failed';
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open' });
            if (issues.find(i => i.title === title)) {
              core.info('Failure issue already open.');
            } else {
              await github.rest.issues.create({ owner, repo, title, body, labels: ['seed-failure'] });
            }
