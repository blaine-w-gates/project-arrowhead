name: Audit Blog Seed

on:
  workflow_dispatch:
  schedule:
    - cron: '17 2 * * *' # daily at 02:17 UTC

concurrency:
  group: seed-audit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  audit:
    name: Audit blog FS vs DB
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    environment:
      name: Production
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'website-integration/ArrowheadSolution/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: website-integration/ArrowheadSolution

      - name: Run audit
        id: audit_run
        continue-on-error: true
        run: npm run db:seed:audit
        working-directory: website-integration/ArrowheadSolution

      - name: Upload audit artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: seed-audit
          path: website-integration/ArrowheadSolution/seed-audit.json
          if-no-files-found: warn
          retention-days: 7

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            let body = `Seed audit workflow failed for ${owner}/${repo} on ${context.ref}.\n\nRun: ${runUrl}`;
            try {
              const p = 'website-integration/ArrowheadSolution/seed-audit.json';
              if (fs.existsSync(p)) {
                const r = JSON.parse(fs.readFileSync(p, 'utf8'));
                body += `\n\nCounts: FS=${r.counts?.fs ?? 'N/A'}, DB=${r.counts?.db ?? 'N/A'}`;
                if (r.drift) {
                  body += `\nOnly in FS: ${(r.drift.onlyA||[]).join(', ') || '(none)'}\nOnly in DB: ${(r.drift.onlyB||[]).join(', ') || '(none)'}`;
                }
              }
            } catch (e) {}
            const title = 'Seed audit workflow failed';
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open' });
            if (issues.find(i => i.title === title)) {
              core.info('Failure issue already open.');
            } else {
              await github.rest.issues.create({ owner, repo, title, body, labels: ['seed-failure'] });
            }

      - name: Job summary
        if: always()
        run: |
          node -e "const fs=require('fs'); const p='seed-audit.json'; if(!fs.existsSync(p)){ console.log('No seed-audit.json; skipping summary'); process.exit(0);} const r=JSON.parse(fs.readFileSync(p,'utf8')); const hdr=['# Seed Audit','','Time: '+r.timestamp, r.note?('Note: '+r.note):'', 'Counts: FS='+r.counts.fs+', DB='+(r.counts.db??'N/A'), '', r.drift?('Only in FS: '+r.drift.onlyA.join(', ')):'', r.drift?('Only in DB: '+r.drift.onlyB.join(', ')):'' ].filter(Boolean).join('\n'); fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, hdr); console.log('Wrote summary');"
        working-directory: website-integration/ArrowheadSolution

      - name: Create issue if drift detected
        if: steps.audit_run.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            const path = 'website-integration/ArrowheadSolution/seed-audit.json';
            let body = `Audit failed and no report was generated.\n\nRun: ${runUrl}`;
            try {
              const r = JSON.parse(fs.readFileSync(path, 'utf8'));
              body = `Seed drift detected.\n\nCounts: FS=${r.counts.fs}, DB=${r.counts.db}\n\nOnly in FS: ${(r.drift?.onlyA||[]).join(', ') || '(none)'}\n\nOnly in DB: ${(r.drift?.onlyB||[]).join(', ') || '(none)'}\n\nTime: ${r.timestamp}\n\nRun: ${runUrl}`;
            } catch (e) {}
            const title = 'Blog seed drift detected';
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: 'seed-drift' });
            if (issues.find(i => i.title === title)) {
              core.info('Drift issue already open.');
            } else {
              await github.rest.issues.create({ owner, repo, title, body, labels: ['seed-drift'] });
            }
