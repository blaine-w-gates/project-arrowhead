name: Apply RLS Policies

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'website-integration/ArrowheadSolution/drizzle/migrations/0001_blog_posts_rls.sql'

concurrency:
  group: apply-rls-${{ github.ref }}
  cancel-in-progress: true

jobs:
  apply:
    name: Apply RLS to Production DB
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: Production
    env:
      DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'website-integration/ArrowheadSolution/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: website-integration/ArrowheadSolution

      - name: "Preflight: validate DATABASE_URL"
        run: |
          if [ -z "${DATABASE_URL:-}" ]; then
            echo "DATABASE_URL is empty. Set the Production secret SUPABASE_DATABASE_URL to your full Postgres URI." >&2
            exit 1
          fi
          node -e "try{ new URL(process.env.DATABASE_URL); console.log('DATABASE_URL validated'); } catch(e){ console.error('Invalid DATABASE_URL. Expected a full Postgres URL like: postgresql://USER:PASSWORD@HOST:5432/DB?sslmode=require'); process.exit(2); }"
        working-directory: website-integration/ArrowheadSolution

      - name: "Debug: resolve DB host (no secrets)"
        continue-on-error: true
        run: |
          node -e "(async()=>{const u=new URL(process.env.DATABASE_URL);console.log('host:',u.hostname);try{const dns=require('dns').promises;const a=await dns.lookup(u.hostname,{all:true});console.log('addresses:',a);}catch(e){console.error('DNS lookup failed:',e.message);console.log('Continuing...')}})()"
        working-directory: website-integration/ArrowheadSolution

      - name: Resolve IPv4 and export PGHOSTADDR
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(node -p "new URL(process.env.DATABASE_URL).hostname")
          echo "Host: $HOST"
          IPV4=$(getent ahostsv4 "$HOST" | awk 'NR==1{print $1}') || true
          if [ -z "${IPV4:-}" ]; then
            echo "No IPv4 via getent; trying public resolvers..."
            if ! command -v dig >/dev/null 2>&1; then
              sudo apt-get update && sudo apt-get install -y dnsutils
            fi
            for RES in 1.1.1.1 8.8.8.8 9.9.9.9 208.67.222.222; do
              IPV4=$(dig +short A "$HOST" @"$RES" | head -n1 || true)
              [ -n "${IPV4:-}" ] && break
            done
            if [ -z "${IPV4:-}" ]; then
              echo "Trying HTTPS DNS (dns.google)..."
              IPV4=$(curl -fsSL "https://dns.google/resolve?name=$HOST&type=A" | node -e 'let s="";process.stdin.on("data",c=>s+=c);process.stdin.on("end",()=>{try{const j=JSON.parse(s);const ans=(j.Answer||[]).find(v=>v.type===1);process.stdout.write(ans?ans.data:"");}catch(e){}})' || true)
            fi
          fi
          if [ -z "${IPV4:-}" ]; then
            echo "No IPv4 address found; continuing without PGHOSTADDR (may fail on IPv6-only)."
          else
            echo "PGHOSTADDR=$IPV4" >> "$GITHUB_ENV"
            echo "Exported PGHOSTADDR: $IPV4"
          fi
        working-directory: website-integration/ArrowheadSolution

      - name: Verify effective DATABASE_URL host (sanitized)
        run: |
          node -e "try{const u=new URL(process.env.DATABASE_URL);const net=require('net');const sanitized=u.toString().replace(/:[^:@\\/]+@/,'://****@');console.log('effective host:',u.hostname,'ipVersion:',net.isIP(u.hostname)||'N/A','sslmode:',u.searchParams.get('sslmode'));console.log('PGHOSTADDR:',process.env.PGHOSTADDR||'');console.log('effective DATABASE_URL (sanitized):',sanitized);}catch(e){console.log('Skipping verify: DATABASE_URL is not a valid URL');}"
        working-directory: website-integration/ArrowheadSolution

      - name: Apply RLS migration
        run: npm run db:rls:apply
        env:
          NODE_ENV: production
          NODE_OPTIONS: --dns-result-order=ipv4first
          PGSSLMODE: require
        working-directory: website-integration/ArrowheadSolution

      - name: Job summary
        if: always()
        run: |
          echo "# RLS Apply" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Applied migration: website-integration/ArrowheadSolution/drizzle/migrations/0001_blog_posts_rls.sql" >> "$GITHUB_STEP_SUMMARY"
