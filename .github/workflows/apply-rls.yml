name: Manage & Verify RLS Policies

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'website-integration/ArrowheadSolution/drizzle/migrations/0001_blog_posts_rls.sql'
  schedule:
    # Run nightly at 09:00 UTC (adjust in future if needed)
    - cron: '0 9 * * *'

concurrency:
  group: manage-rls-${{ github.ref }}
  cancel-in-progress: true

jobs:
  apply:
    name: Manage & Verify RLS Policies
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    environment:
      name: Production
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'website-integration/ArrowheadSolution/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: website-integration/ArrowheadSolution
      - name: Compute short SHA
        id: sha
        run: echo "short=$(echo $GITHUB_SHA | cut -c1-8)" >> "$GITHUB_OUTPUT"

      - name: Preflight secrets
        run: |
          for v in SUPABASE_URL SUPABASE_SERVICE_ROLE_KEY SUPABASE_ANON_KEY; do
            if [ -z "${!v:-}" ]; then
              echo "$v is not set" >&2
              exit 1
            fi
          done
          echo "All required secrets present (values hidden)"
        working-directory: website-integration/ArrowheadSolution

      - name: Verify RLS via REST
        run: |
          node scripts/verify-rls-rest.mjs 2>&1 | tee verify-rls-rest.log
        working-directory: website-integration/ArrowheadSolution

      - name: Upload verification artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-rls-rest-${{ steps.sha.outputs.short }}
          path: |
            website-integration/ArrowheadSolution/verify-rls-rest.json
            website-integration/ArrowheadSolution/verify-rls-rest.log
          if-no-files-found: warn
          retention-days: 30

      - name: Job summary
        if: always()
        run: |
          echo "# RLS Management" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**To Apply/Update RLS:** Follow the manual instructions in [docs/rls-apply.md](docs/rls-apply.md)." >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Verification Result:**" >> "$GITHUB_STEP_SUMMARY"
          node -e "const fs=require('fs'); const p='website-integration/ArrowheadSolution/verify-rls-rest.json'; if(!fs.existsSync(p)){ console.log('No verify-rls-rest.json; skipping'); process.exit(0);} const r=JSON.parse(fs.readFileSync(p,'utf8')); const lines=['','Pass: '+r.pass,'Anon published count: '+(r.checks?.anonPublishedCount??'N/A'),'Anon drafts count: '+(r.checks?.anonDraftsCount??'N/A'),'Service drafts count: '+(r.checks?.serviceDraftsCount??'N/A'),'','Messages:',...(r.messages||[]).map(m=>'- '+m)]; fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, lines.join('\n')); console.log('Appended verification summary');"
        working-directory: website-integration/ArrowheadSolution
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            let body = `RLS verification failed for ${owner}/${repo} on ${context.ref}.\n\nRun: ${runUrl}`;
            try {
              const p = 'website-integration/ArrowheadSolution/verify-rls-rest.json';
              if (fs.existsSync(p)) {
                const r = JSON.parse(fs.readFileSync(p, 'utf8'));
                body += `\n\nPass: ${r.pass}`;
                if (r.checks) {
                  body += `\nAnon published count: ${r.checks.anonPublishedCount ?? 'N/A'}`;
                  body += `\nAnon drafts count: ${r.checks.anonDraftsCount ?? 'N/A'}`;
                  body += `\nService drafts count: ${r.checks.serviceDraftsCount ?? 'N/A'}`;
                }
                if (Array.isArray(r.messages) && r.messages.length) {
                  body += `\n\nMessages:\n- ${r.messages.join('\n- ')}`;
                }
              }
            } catch (e) {}
            const title = 'RLS verification failed';
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open' });
            if (issues.find(i => i.title === title)) {
              core.info('RLS failure issue already open.');
            } else {
              await github.rest.issues.create({ owner, repo, title, body, labels: ['rls-failure'] });
            }
